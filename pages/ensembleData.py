import streamlit as st

st.title("Ensemble model")
st.write("This is an ensemble model consist of 3 models")
st.write("KNN, SVM and Decision tree")
st.image("imgs/ensembleEnsemble.png")
st.write("I train each model individually and dump them into a .sav file")
st.write("After that, I combile all of them into one model(Ensemble model) and also dump it into a .sav file")
st.write("")
st.write("")

####################################
####################################

st.title("Dataset")
st.write("I use the dataset from kaggle")
st.write("Dataset's source: https://www.kaggle.com/datasets/kevinarvai/clinvar-conflicting")
st.write("")
st.write("This dataset has 65188 rows and 46 columns and contain NaN/null values")
st.write("to clean the data I drop all the columns that contain NaN/null values and are not important columns") 
st.write("after that I got 65188 rows and 5 to 11 columns depends on the model(not count the target column)")
st.write("")
st.write("but some columns contain string values so I encode them into numerical values with LabelEncoder")
st.write("and scale the data using StandardScaler as a way to increase model's training performance")
st.write("After that I dump the LabelEncoder and scaler into a .pkl file to use on website")
st.write("If the data isn't encoded in the same way as it was in the training process,")
st.write("the results might be different, leading to prediction errors.")
st.write("")
st.write("")
st.write("**For more detail about the dataset cleaning**")
st.write("I use scaler for 'POS', 'AF_ESP', 'AF_EXAC', 'AF_TGP' columns")
st.write("and LabelEncoder for 'CHROM', 'REF', 'ALT', 'CLNVC', 'ORIGIN', 'Allele', 'IMPACT'")
st.write("")
st.write("")
st.title("Feature expantion")
st.write("**Class(the target column)**")
st.write("It is a binary representation of whether or not a variant has conflicting classifications, where 0 represents consistent classifications and 1 represents conflicting classifications. ")
st.write("")
st.write("**CHROM**")
st.write("The chromosome number where the variant is located. It can be a number(e.g., 1, 2, 3) or a special chromosome such as X or Y.")
st.write("")
st.write("**POS**")
st.write("The exact position on the chromosome where the variant is located, based on genomic coordinates.")
st.write("")
st.write("**REF**")
st.write("The reference allele, which represents the normal base sequence at that position in the genome.")
st.write("")
st.write("**ALT**")
st.write("The alternate allele, representing the changed base sequence compared to the reference allele (REF).")
st.write("")
st.write("**AF_ESP**")
st.write("Allele frequency from the GO-ESP (NHLBI Exome Sequencing Project), which studies genetic variation.")
st.write("")
st.write("**AF_EXAC**")
st.write("Allele frequency from the ExAC (Exome Aggregation Consortium) database, which aggregates data from global populations.")
st.write("")
st.write("**AF_TGP**")
st.write("Allele frequency from the 1000 Genomes Project, which collects genetic variation data from diverse populations.")
st.write("")
st.write("**CLNVC**")
st.write("The clinical variant classification, indicating the type of mutation (e.g., Missense, Nonsense, Frameshift).")
st.write("")
st.write("**ORIGIN**")
st.write("The origin of the allele where the variant occurs. Possible values include 1 - Germline (inherited from parents), 2 - Somatic (acquired in the body), or 32 - De novo (new mutation not inherited).")
st.write("")
st.write("**Allele**")
st.write("The allele used to calculate the consequence of the variant. It can be either the REF (Reference Allele) or ALT (Alternate Allele), depending on how the mutation affects the genome.")
st.write("")
st.write("**IMPACT**")
st.write("represents the impact modifier for the consequence type of a genetic variant. It indicates how much a given variant is expected to affect gene function or protein structure. Common categories include High, Moderate, Low, or Modifier, depending on the predicted severity.")
st.write("")




####################################
####################################

st.title("KNN (K-Nearest Neighbors)")
st.write("It is a machine learning algorithm, It works by finding the closest data points with K(neighbors)")
st.write("The prediction will assign a value based on the values of the K nearest neighbors, for example, K=10.")
st.write("There are a total of 6 points for A and 4 points for B. The model will predict that the answer is A.")
st.write("Here is feature that I use for Train: CHROM, POS, ALT, REF, IMPACT, CLASS(target column)")
st.write("Here is hyperparameter: K=15")
st.write("KNN efficiency: ")
st.image("imgs/knnResult.png")
st.write("")
st.write("")
st.title("SVM")
st.write("The main idea behind SVM is to find a hyperplane (a decision boundary) that best separates the data")
st.write("into distinct classes. The goal is to maximize the margin between the classes,")
st.write("ensuring the data points from each class are as far away as possible from the decision boundary.")
st.write("This is done by focusing on the support vectors, the data points that are closest to the hyperplane.")
st.write("SVM attempts to find the hyperplane by utilizing the hyperparameters that are set.")
st.write("Once the hyperplane is found, when making predictions, we simply input the data and")
st.write("check which group the data belongs to, using the hyperplane as the boundary to separate the groups.")
st.write("Here is hyperparameter: kernel=poly, degree=3, C=2.005")
st.write("SVM efficiency: ")
st.write("Here is feature that I use for Train: CHROM, POS, ALT, REF, IMPACT, CLASS(target column)")
st.write("SVM efficiency: ")
st.image("imgs/svmResult.png")
st.write("")
st.write("")
st.title("Decision tree")
st.write("It represents decisions and their possible consequences as a tree-like structure,")
st.write("where each internal node represents a decision (if-else), each branch represents")
st.write("the outcome of that decision, and the leaf nodes represent the result of prediction.")
st.write("This model starts at the root and passes through nodes (if-else) continuely until")
st.write("it reaches a leaf node, which is the prediction result.")
st.write("So, this means that for a large tree, you have many more if-else conditions,")
st.write("which can lead to larger consequences.")
st.write("Here is hyperparameter: max_depth=15, min_samples_split=10, criterion=entropy")
st.write("Here is feature that I use for Train: ")
st.write("CHROM, POS, REF, ALT, AF_ESP, AF_EXAC, AF_TGP, CLNVC, ORIGIN, Allele, IMPACT, CLASS(target column)")
st.write("Decision tree efficiency: ")
st.image("imgs/desiResult.png")
st.write("")
st.write("")
st.title("Ensemble")
st.write("This model I load all the models(KNN, SVM, Decision tree)")
st.write("")
st.write("Ensemble efficiency:")
st.image("imgs/ensemAcc.png")
st.image("imgs/ensemConfu.png")